<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jpgbit.github.io</id>
    <title>QianChen</title>
    <updated>2019-12-30T13:51:40.222Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jpgbit.github.io"/>
    <link rel="self" href="https://jpgbit.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jpgbit.github.io/images/avatar.png</logo>
    <icon>https://jpgbit.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, QianChen</rights>
    <entry>
        <title type="html"><![CDATA[Linux系统管理员应该知道的journalctl知识]]></title>
        <id>https://jpgbit.github.io/post/linux-xi-tong-guan-li-yuan-ying-gai-zhi-dao-de-journalctl-zhi-shi</id>
        <link href="https://jpgbit.github.io/post/linux-xi-tong-guan-li-yuan-ying-gai-zhi-dao-de-journalctl-zhi-shi">
        </link>
        <updated>2019-12-30T13:50:24.000Z</updated>
        <content type="html"><![CDATA[<p>在Systemd出现之前，Linux系统及各应用的日志都是分别管理的，Systemd开始统一管理了所有Unit的启动日志，这样带来的好处就是可以只用一个 journalctl命令，查看所有内核和应用的日志。</p>
<ol>
<li>基础用法<br>
1.1 查看所有日志(默认显示本次启动的所有日志)<br>
[root@devops-101 ~]# journalctl<br>
查看本次启动的所有日志也可以使用</li>
</ol>
<p>[root@devops-101 ~]# journalctl -b<br>
1.2 查看内核日志<br>
[root@devops-101 ~]# journalctl -k<br>
1.3 查看指定时间的日志<br>
通过--since和--until选项，可以过滤任意时间限制，显示指定条件之前、之后或之间的日志。</p>
<p>[root@devops-101 ~]# journalctl --since=&quot;2018-09-21 10:21:00&quot;<br>
查询一个时间段范围内的日志。</p>
<p>[root@devops-101 ~]# journalctl --since=&quot;2018-09-21 10:21:00&quot; --until=&quot;2018-09-21 10:22:00&quot;<br>
1.4 根据不同的主题进行过滤筛选<br>
根据服务筛选</p>
<p>[root@devops-101 ~]# journalctl -u kubelet.service<br>
[root@devops-101 ~]# journalctl -u kubelet<br>
根据进程ID查询<br>
如果进程使用了systemd托管日志，则可以通过以下命令查找进程对应的日志。</p>
<p>[root@devops-101 ~]# journalctl _PID=1<br>
Systemd journal 有很多可以用来过滤的字段，可以通过 man systemd.journal-fields 查看所有可以用来过滤的字段。对于用来筛选的字段，可以使用-F参数来查看所有可以用来过滤的值，例如journalctl -F _PID。</p>
<p>按优先级<br>
操作系统提供了从0 (emerg) 到 7 (debug) 一共7个级别的日志，可以配合-p参数分别查看对应级别的日志。</p>
<p>[root@devops-101 ~]# journalctl -p 5 -u kubelet<br>
7个级别的含义为</p>
<p>0: emerg<br>
1: alert<br>
2: crit<br>
3: err<br>
4: warning<br>
5: notice<br>
6: info<br>
7: debug<br>
1.5 调整显示输出<br>
默认情况，journal输出进入分页模式，用户可以在终端上调整显示的内容，如果要不需要分页，需要加上--no-pager参数。</p>
<p>以Json格式输出</p>
<p>[root@devops-101 ~]# journalctl -p 5 --no-pager -o json<br>
通过-o参数，可以设置为json格式输出，这对于其他接收json格式的日志分析工具非常友好。</p>
<p>[root@devops-101 ~]# journalctl -p 5 --no-pager -o json-pretty<br>
使用json-pretty则对于管理员查看日志非常易读。</p>
<p>支持的各种格式如下：</p>
<p>cat: 只显示信息字段本身。<br>
export: 适合传输或备份的二进制格式。<br>
json: 标准JSON，每行一个条目。<br>
json-pretty: JSON格式，适合人类阅读习惯。<br>
json-sse: JSON格式，经过打包以兼容server-sent事件。<br>
short: 默认syslog类输出格式。<br>
short-iso: 默认格式，强调显示ISO 8601挂钟时间戳。<br>
short-monotonic: 默认格式，提供普通时间戳。<br>
short-precise: 默认格式，提供微秒级精度。<br>
verbose: 显示该条目的全部可用journal字段，包括通常被内部隐藏的字段。<br>
1.6 活动日志跟踪<br>
journalctl也支持类似tail的功能，如通过-n参数指定显示最近的多少行，默认为10行，通过-f参数持续监控日志输出。</p>
<ol start="2">
<li>维护<br>
2.1 查看日志占用的磁盘空间<br>
[root@devops-101 ~]# journalctl --disk-usage<br>
Archived and active journals take up 8.0M on disk.<br>
2.2 设置日志占用的空间<br>
root@devops-101 ~]# journalctl --vacuum-size=500M<br>
Vacuuming done, freed 0B of archived journals on disk.<br>
2.3 设置日志保存的时间<br>
[root@devops-101 ~]# journalctl --vacuum-time=1month<br>
Vacuuming done, freed 0B of archived journals on disk.</li>
<li>配置<br>
上面的一些维护动作，也可以通过配置参数设置，配置文件位于/etc/systemd/journald.conf。</li>
</ol>
<p>Storage=persistent<br>
Compress=yes<br>
Seal=yes<br>
SplitMode=uid<br>
SyncIntervalSec=5m<br>
RateLimitInterval=30s<br>
RateLimitBurst=1000<br>
SystemMaxUse=<br>
SystemKeepFree=<br>
SystemMaxFileSize=<br>
RuntimeMaxUse=<br>
RuntimeKeepFree=<br>
RuntimeMaxFileSize=<br>
MaxRetentionSec=<br>
MaxFileSec=1month<br>
ForwardToSyslog=yes<br>
ForwardToKMsg=no<br>
ForwardToConsole=no<br>
ForwardToWall=yes<br>
TTYPath=/dev/console<br>
MaxLevelStore=debug<br>
MaxLevelSyslog=debug<br>
MaxLevelKMsg=notice<br>
MaxLevelConsole=info<br>
MaxLevelWall=emerg</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[卸载阿里云腾讯云服务器监控系统教程]]></title>
        <id>https://jpgbit.github.io/post/xie-zai-a-li-yun-teng-xun-yun-fu-wu-qi-jian-kong-xi-tong-jiao-cheng</id>
        <link href="https://jpgbit.github.io/post/xie-zai-a-li-yun-teng-xun-yun-fu-wu-qi-jian-kong-xi-tong-jiao-cheng">
        </link>
        <updated>2019-12-17T13:46:13.000Z</updated>
        <content type="html"><![CDATA[<pre><code>众所周知，阿里云、腾讯云的服务器都自带监控（AliYunDun/阿里云盾/安骑士），大家都不想自己的所作所为都被监控着，比如我在上面安装XX服务，一旦云监控查到，会被警告，很麻烦，我们总想着自己买的东西能够完全自己做主，所以我们需要让他的监控失效，卸载监控！
</code></pre>
<p>卸载阿里云AliYunDun</p>
<p>第一步：SSH连接阿里云服务器，在终端中输入下方命令，进行卸载AliYunDun操作</p>
<p>wget http://update.aegis.aliyun.com/download/uninstall.sh<br>
sh uninstall.sh<br>
wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh<br>
sh quartz_uninstall.sh</p>
<p>第二步：继续在终端中输入下发命令，删除AliYunDun残留</p>
<p>pkill aliyun-service<br>
rm -fr /etc/init.d/agentwatch /usr/sbin/aliyun-service<br>
rm -rf /usr/local/aegis*</p>
<p>卸载腾讯云安全监控软件</p>
<p>在默认安装系统的时候不要勾选安全云镜和安全监控软件，如果安装了监控软件后如何卸载，操作如下：</p>
<p>/usr/local/qcloud/stargate/admin/uninstall.sh<br>
/usr/local/qcloud/YunJing/uninst.sh<br>
/usr/local/qcloud/monitor/barad/admin/uninstall.sh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么百度搜索只收录网站首页不收内]]></title>
        <id>https://jpgbit.github.io/post/wei-shi-me-bai-du-sou-suo-zhi-shou-lu-wang-zhan-shou-ye-bu-shou-nei</id>
        <link href="https://jpgbit.github.io/post/wei-shi-me-bai-du-sou-suo-zhi-shou-lu-wang-zhan-shou-ye-bu-shou-nei">
        </link>
        <updated>2019-12-17T13:43:06.000Z</updated>
        <content type="html"><![CDATA[<p>一般来说 新站刚上线 起码要一两个月才会开始收录 前期一般只是收录一个首页而已，对于这个情况，没有别的办法，因为百度为了防止垃圾站的泛滥，特地把新站的审核时间拉长，所以，如果你操作的是新站，那么收录量少，不用紧张，只要你老老实实的提供优质内容，那么慢慢百度就会开始收录你的内页了</p>
<p>新站内页收录时间会长一些，大概在首页收录后半个月到一个月开始收录内容，所以不讨论新站的内页收录。而如果是超过3个月的网站不收录内页主要有以下几个情况：</p>
<p>内页质量很低<br>
内容质量非常低，根本没有阅读价值。文章排版很乱、字体大小和颜色没有统一，文章内容里面还穿插一些没必要的锚文字链接以及一些广告链接。</p>
<p>(1)首先要把上面提到的项目全部修改，并且给文章增加可读性以及附加价值。</p>
<p>(2)分析长尾词需求，布局内容，从需求上解决用户的问题</p>
<p>(3)丰富网页内容</p>
<p>样板文字太多，页面相似度太大<br>
样板文字就是指那些大部分页面都会有的内容，比如竖导航、推荐文章、联系我们、上一篇下一篇等等。这些文字越多，页面之间的相似度就越大。而有的页面除了这些内容就只剩下一个产品图片，这样的页面相似度100%。搜索引擎为什么要收录那么多一模一样的内容呢?所以一定要减少样板文字，增加每个页面的质量。</p>
<p>内页权重不够<br>
内页权重不够或者网站权重不够。每一个网页被收录都需要在权重值达到一定值以后才会被搜索引擎收录，如果网站权重不够就不能传递给网页不错的权重。解决办法就是多做一些高权重外链或者给栏目页、内页做一些友情链接和外链。</p>
<p>网站信用度低<br>
新站的信用度主要来自于更新频率和内容质量，老站的信用度来自于内容质量，所以去做内容。内容质量很好，用户乐意点击，搜索引擎怎么会不收录?</p>
<p>内容工作的安排<br>
对于一个新站来说，前期1个月内每天3-5篇高质量的文章就可以了，按照这个进度推进即可，千万不要急于求量，也不要一天更新很多篇，然后很长时间不更新，这样保持一定的频率来更新</p>
<p>百度蜘蛛是可以培养的，百度蜘蛛就会每天不请自来，每次来都能收获新鲜的高质量内容，这样的网站是百度很青睐的，内容得分就会很高了，收录就是很自然的，做好了基本就秒收了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搜索引擎查询指令大全]]></title>
        <id>https://jpgbit.github.io/post/sou-suo-yin-qing-cha-xun-zhi-ling-da-quan</id>
        <link href="https://jpgbit.github.io/post/sou-suo-yin-qing-cha-xun-zhi-ling-da-quan">
        </link>
        <updated>2019-12-17T13:40:33.000Z</updated>
        <content type="html"><![CDATA[<p>一、site<br>
例如：site:www.yque.cn<br>
site:是SEO 最熟悉最常用的高级搜索指令了吧，用来搜索某个域名(用这个域名：www.yque.cn来查询，site:www.yque.cn)下的所有文件。</p>
<p>二、减号<br>
例如：-.www.yque.cn<br>
减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google 和百度都支持这个指令。例如：搜索 -引擎返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果。</p>
<p>三、星号<br>
例如：*www.yque.cn<br>
星号是常用的通配符，也可以用在搜索中。百度不支持号搜索指令。比如在Google 中搜索：搜索擎其中的号代表任何文字。返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。</p>
<p>四、inurl<br>
例如：inurl:www.yque.cn<br>
inurl: 指令用于搜索查询词出现在url 中的页面。百度和Google 都支持inurl 指令。inurl 指令支持中文和英文。比如搜索：inurl:搜索引擎优化<br>
返回的结果都是网址url 中包含“搜索引擎优化”的页面。由于关键词出现在url 中对排名有一定影响，使用inurl:搜索可以更准确地找到竞争对手。</p>
<p>五、inanchor<br>
例如：inanchor:www.yque.cn<br>
inanchor:指令返回的结果是导入链接锚文字中包含搜索词的页面。百度不支持inanchor。比如在Google 搜索 ：inanchor:点击这里返回的结果页面本身并不一定包含“点击这里”这四个字，而是指向这些页面的链接锚文字中出现了“点击这里”这四个字。可以用来找到某个关键词的竞争对收，而且这些竞争对手往往是做过SEO 的。研究竞争对手页面有哪些外部链接，就可以找到很多链接资源。</p>
<p>六、intitle<br>
例如：intitle:www.yque.cn<br>
intitle: 指令返回的是页面title 中包含关键词的页面。Google 和百度都支持intitle 指令。使用intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。</p>
<p>七、allintitle<br>
例如：“www.yque.cn”<br>
allintitle:搜索返回的是页面标题中包含多组关键词的文件。例如 ：allintitle:SEO 搜索引擎优化就相当于：intitle:SEO intitle:搜索引擎优化返回的是标题中中既包含“SEO”，也包含“搜索引擎优化”的页面</p>
<p>八、allinurl<br>
例如：allinurl:www.yque.cn<br>
与allintitle: 类似。allinurl:SEO 搜索引擎优化就相当于 ：inurl:SEO inurl:搜索引擎优化</p>
<p>九、filetype<br>
例如：filetype:txt 名单<br>
用于搜索特定文件格式。Google 和百度都支持filetype 指令。比如搜索filetype:txt 名单 返回的就是包含名单 这个关键词的所有TXT 文件。</p>
<p>十、双引号<br>
例如：“www.yque.cn”<br>
用双引号包住搜索词，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。百度和Google 都支持这个指令。</p>
<p>十一、linkdomain<br>
例如：linkdomain:www.yque.cn<br>
linkdomain:指令只适用于雅虎，返回的是某个域名的反向链接。雅虎的反向链接数据还比较准确，是SEO 人员研究竞争对手外部链接情况的重要工具之一。比如搜索<br>
linkdomain:www.yque.cn得到的就是一口笑的外部链接，因为-site:www.yque.cn已经排除了点石本身的页面，也就是内部链接，剩下的就都是外部链接了。</p>
<p>十二、related<br>
例如：related:www.yque.cn<br>
related:指令只适用于Google，返回的结果是与某个网站有关联的页面。比如搜索<br>
related:hzaima.com我们就可以得到Google 所认为的与大明seo有关联的其他页面。 这种关联到底指的是什么，Google 并没有明确说明，一般认为指的是有共同外部链接的网站。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[KMS]]></title>
        <id>https://jpgbit.github.io/post/kms</id>
        <link href="https://jpgbit.github.io/post/kms">
        </link>
        <updated>2019-11-22T13:16:07.000Z</updated>
        <content type="html"><![CDATA[<p>什么是KMS?<br>
Key Management Service（简称：KMS），这个功能是在 Windows Vista 之后的产品中的一种新型产品激活机制，目的是为了 Microsoft 更好的遏制非法软件授权行为 (盗版)。<br>
[scode type=&quot;green&quot;] KMS 激活有两种方法，分别为 vlm­csd 和 py-kms，本文使用 vlm­csd 进行搭建 [/​scode]</p>
<p>为什么要自建KMS激活服务？<br>
虽然现在网络上已经涌现了大批的激活工具，但是存在许多不安定因素，例如后门或者病毒等，会造成较大的安全隐患，而自己搭建 Kms 激活服务则可以避免这类问题～</p>
<p>注意：只能激活 VL 版本的 Windows<br>
VL，就是 VOL，Volume Licensing for Organizations 的缩写，中文翻译为团体批量许可证</p>
<p>环境：CentOS 7.5<br>
[but­ton color=&quot;suc­cess&quot; icon=&quot;glyph­icon glyph­icon-file&quot;]Vlmcsd[/but­ton]<br>
首先使用下面命令确认机器的 CPU 架构</p>
<p>cat /proc/cpuinfo<br>
这是我机器的信息</p>
<p>1.png<br>
1.png<br>
首先从Github下载项目文件<br>
yum -y install wget<br>
wget https://github.com/Wind4/vlmcsd/releases/download/svn1111/binaries.tar.gz<br>
解压安装包</p>
<p>tar -xvf binaries.tar.gz<br>
如果你机器的架构为 Intel，cd 到如下目录，否则的话需要在 binaries 目录内找到对应你机器 CPU 架构的目录</p>
<p>cd binaries/Linux/intel/static<br>
启动服务</p>
<p>./vlmcsd-x64-musl-static<br>
如果你的机器不是 64 位系统，则需要内找到对应系统位数的可执行文件来运行<br>
因为 vlmcsd 运行后会占用 1688 端口，请在防火墙放行 1688 端口，或者关闭防火墙，所以我们可以输入以下命令查看是否成功启动：</p>
<p>netstat -lnp<br>
激活<br>
以管理员身份运行 CMD</p>
<p>slmgr /skms 你服务器的IP或者域名<br>
slmgr /ato<br>
slmgr /xpr<br>
到这你的 KMS 服务应该可以正常使用了，激活周期为 180 天，到期后如果你的 KMS 服务器还在运行，Windows 将自动进行激活</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=541115552&auto=1&height=66"></iframe>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是SEO]]></title>
        <id>https://jpgbit.github.io/post/shi-me-shi-seo</id>
        <link href="https://jpgbit.github.io/post/shi-me-shi-seo">
        </link>
        <updated>2019-11-22T13:10:36.000Z</updated>
        <content type="html"><![CDATA[<p>SEO英文是Search Engine Optimization，翻译过来的意思搜索引擎优化。</p>
<p>从广义上讲，只要存在搜索的地方，就存在SEO，数据的复杂程度决定了SEO的复杂程度。做电商的朋友都知道，淘宝有SEO，京东有SEO，苏宁易购有SEO等等，每个平台都有SEO准则。更广义的讲，只要网站有搜索框，可能就所在SEO，怎么把最优化的搜索结果呈现给客户，也是站内SEO的重点。还有就是全网的SEO，这类的代表就是各大搜索引擎了，也就是我们传统的SEOer所熟知的SEO。</p>
<p>SEO的工作原理</p>
<p>搜索引擎优化是一种利用搜索引擎的搜索规则来提高目前网站在有关搜索引擎内的自然排名的方式。<br>
SEO的分类</p>
<p>SEO分为站内SEO与站外SEO两种。站内主要负责：文章的编辑,站内链接跳转的优化。站外：主要负责外联的建立以及友情链接的交换。</p>
<p>一：站内优化</p>
<p>1:META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化<br>
2:内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接<br>
3:网站内容更新：每天保持站内的更新(主要是文章的更新等)</p>
<p>二：站外优化</p>
<p>1:外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、相关信息网等尽量保持链接的多样性</p>
<p>2:外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。</p>
<p>3:外链选择：与一些和你网站相关性比较高,整体质量比较好的网站交换友情链接,巩固稳定关键词排名</p>
<p>seo是什么的终极答案-坚持用户体验，给用户提供有价值的信息和资料</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V2Ray]]></title>
        <id>https://jpgbit.github.io/post/v2ray</id>
        <link href="https://jpgbit.github.io/post/v2ray">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今天推荐 V2Ray 是肯定有原因的。</p>
<p>此篇教程是转载，感觉非常不错，来此做个记录分享扩散一下也好。</p>
<p>此 V2Ray 脚本完完全全是为小白量身定制的，本 V2Ray。</p>
<p>V2Ray(Project V) 相对于 Shadowsocks，V2Ray 更像全能选手，拥有更多可选择的协议 / 传输载体 (Socks、HTTP、TLS、TCP、mKCP、WebSocket )，还有强大的路由功能，不仅仅于此，它亦包含 Shadowsocks 组件，你只需要安装 V2Ray，你就可以使用所有的 V2Ray 相关的特性包括使用 Shadowsocks，由于 V2Ray 是使用 GO 语言所撰写的，天生的平台部署优势，部署好服务端后，下载即可使用。</p>
<p>我们需要先购买一款 VPS 用来搭建 V2Ray ，<br>
当然你如果看完这篇文章还是想用 SS/SSR ，推荐使用 SS ，毕竟 SSR 作者已经被请喝茶了，源代码也删除了，SS 还在维护，</p>
<p>🚩安装 V2Ray😏</p>
<p>输入下面命令回车，你可以复制过去，然后在 Xshell 界面按 Shift + Insert 即可粘贴，不能按 Ctrl + V 的，Mac 下可以直接 commend + V 粘贴。<br>
<img src="https://jpgbit.github.io/post-images/1574427573807.png" alt=""><br>
bash &lt;(curl -s -L https://git.io/v2ray.sh)</p>
<p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>
ubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -y<br>
centos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y<br>
安装好 curl 之后就能安装脚本了</p>
<p>然后选择安装，即是输入 1 回车<br>
选择传输协议，如果没有特别的需求，使用默认的 TCP 传输协议即可，直接回车<br>
选择端口，如果没有特别的需求，使用默认的端口即可，直接回车<br>
是否屏蔽广告，除非你真的需要，一般来说，直接回车即可，使用的是 kcp 协议，至于什么是 kcp 请自行。。。<br>
<img src="https://jpgbit.github.io/post-images/1574427579718.webp" alt=""></p>
<p>如上图所示，V2Ray 配置信息，那么现在你可以测试一下了，看看是否能正常使用。</p>
<p>如果你使用过 V2Ray 某些客户端，那么现在也可以测试一下配置了。(备注，可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，上面的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。)</p>
]]></content>
    </entry>
</feed>